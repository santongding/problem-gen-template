# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "master" branch
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  get-changed-problems-and-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          
      - name: Get branch name
        id: branch-name
        uses: tj-actions/branch-names@v5

      - uses: nrwl/last-successful-commit-action@v1
        id: last_successful_commit_push
        with:
          branch: ${{ steps.branch-name.outputs.current_branch }} # Get the last successful commit for the current branch. 
          workflow_id: 'problem-test.yml'
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Run changed-files with the commit of the last successful test workflow run
        id: changed-files-base-sha-push
        uses: tj-actions/changed-files@v29.0.1
        with:
          base_sha: ${{ steps.last_successful_commit_push.outputs.commit_hash }}
          
      - name: List all changed files
        run: |
          echo > changed-files.txt
          for file in ${{ steps.changed-files-base-sha-push.outputs.all_changed_files }}; do
            echo "$file"
            echo "$file" >> changed-files.txt
          done
          
      - name: Test all changed problems
        run: |
          python3 auto-test.py
          
      - name: Pack if changed
        run: |
          bash ./auto-pack.sh
          
      - name: Check if need release
        id: release-check
        run: |
          if [  -f "release.zip"  ]; then
              echo "::set-output name=need-release::true"
          else
             echo "::set-output name=need-release::false"
          fi
      
      - name: Release
        if: steps.release-check.outputs.need-release == 'true'
        uses: "marvinpinto/action-automatic-releases@latest"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          title: "Problem package released"
          automatic_release_tag: "latest"
          prerelease: false
          files: |
            release.zip
